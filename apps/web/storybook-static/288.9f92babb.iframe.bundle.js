"use strict";(self.webpackChunk_mustache_web=self.webpackChunk_mustache_web||[]).push([[288],{"../../packages/ui/src/components/Button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>Button});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),clsx=__webpack_require__("../../node_modules/clsx/dist/clsx.mjs"),bundle_mjs=__webpack_require__("../../node_modules/tailwind-merge/dist/bundle-mjs.mjs");function cn(...inputs){return(0,bundle_mjs.QP)((0,clsx.$)(inputs))}const Button=react.forwardRef(({className,variant="primary",size="md",loading=!1,disabled,children,...props},ref)=>(0,jsx_runtime.jsxs)("button",{className:cn("btn focus-ring transition-all duration-200",{primary:"btn-primary",secondary:"btn-secondary",ghost:"btn-ghost",danger:"bg-red-600 text-white hover:bg-red-700 active:bg-red-800"}[variant],{sm:"btn-sm",md:"btn-md",lg:"btn-lg"}[size],(loading||disabled)&&"opacity-50 cursor-not-allowed",className),disabled:loading||disabled,ref,...props,children:[loading&&(0,jsx_runtime.jsxs)("svg",{className:"animate-spin -ml-1 mr-2 h-4 w-4",xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",children:[(0,jsx_runtime.jsx)("circle",{className:"opacity-25",cx:"12",cy:"12",r:"10",stroke:"currentColor",strokeWidth:"4"}),(0,jsx_runtime.jsx)("path",{className:"opacity-75",fill:"currentColor",d:"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"})]}),children]}));Button.displayName="Button";try{Button.displayName="Button",Button.__docgenInfo={description:"",displayName:"Button",props:{variant:{defaultValue:{value:"primary"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"primary"'},{value:'"secondary"'},{value:'"ghost"'},{value:'"danger"'}]}},size:{defaultValue:{value:"md"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"sm"'},{value:'"md"'},{value:'"lg"'}]}},loading:{defaultValue:{value:"false"},description:"",name:"loading",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../../packages/ui/src/components/Button.tsx#Button"]={docgenInfo:Button.__docgenInfo,name:"Button",path:"../../packages/ui/src/components/Button.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/ui/Button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>components_Button.$});var components_Button=__webpack_require__("../../packages/ui/src/components/Button.tsx");__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),__webpack_require__("./node_modules/next/dist/compiled/react/index.js");function Logo_Logo({size="md",className,showText=!0}){return _jsxs("div",{className:cn("flex items-center gap-2",className),children:[_jsx("div",{className:cn("relative flex items-center justify-center",{sm:"h-6 w-6",md:"h-8 w-8",lg:"h-12 w-12"}[size]),children:_jsxs("svg",{viewBox:"0 0 32 32",fill:"none",className:"w-full h-full",xmlns:"http://www.w3.org/2000/svg",children:[_jsx("path",{d:"M4 16C4 12 8 8 12 12C14 10 18 10 20 12C24 8 28 12 28 16C28 20 24 16 20 16C18 18 14 18 12 16C8 16 4 20 4 16Z",fill:"url(#gradient)",className:"drop-shadow-sm"}),_jsx("path",{d:"M16 6V26M12 10H18C19.1 10 20 10.9 20 12C20 13.1 19.1 14 18 14H14C12.9 14 12 14.9 12 16C12 17.1 12.9 18 14 18H20M12 22H18C19.1 22 20 21.1 20 20C20 18.9 19.1 18 18 18",stroke:"white",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}),_jsx("defs",{children:_jsxs("linearGradient",{id:"gradient",x1:"0%",y1:"0%",x2:"100%",y2:"100%",children:[_jsx("stop",{offset:"0%",stopColor:"#2563eb"}),_jsx("stop",{offset:"100%",stopColor:"#7c3aed"})]})})]})}),showText&&_jsx("span",{className:cn("font-bold bg-gradient-to-r from-primary-600 to-secondary-600 bg-clip-text text-transparent",{sm:"text-lg",md:"text-xl",lg:"text-3xl"}[size]),children:"Mustache Cashstache"})]})}try{Logo_Logo.displayName="Logo",Logo_Logo.__docgenInfo={description:"",displayName:"Logo",props:{size:{defaultValue:{value:"md"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"sm"'},{value:'"md"'},{value:'"lg"'}]}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | undefined"}},showText:{defaultValue:{value:"true"},description:"",name:"showText",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../../packages/ui/src/components/Logo.tsx#Logo"]={docgenInfo:Logo_Logo.__docgenInfo,name:"Logo",path:"../../packages/ui/src/components/Logo.tsx#Logo"})}catch(__react_docgen_typescript_loader_error){}try{Button.displayName="Button",Button.__docgenInfo={description:"",displayName:"Button",props:{variant:{defaultValue:{value:"primary"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"primary"'},{value:'"secondary"'},{value:'"ghost"'},{value:'"danger"'}]}},size:{defaultValue:{value:"md"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"sm"'},{value:'"md"'},{value:'"lg"'}]}},loading:{defaultValue:{value:"false"},description:"",name:"loading",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../../packages/ui/src/index.tsx#Button"]={docgenInfo:Button.__docgenInfo,name:"Button",path:"../../packages/ui/src/index.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}try{Logo.displayName="Logo",Logo.__docgenInfo={description:"",displayName:"Logo",props:{size:{defaultValue:{value:"md"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"sm"'},{value:'"md"'},{value:'"lg"'}]}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | undefined"}},showText:{defaultValue:{value:"true"},description:"",name:"showText",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../../packages/ui/src/index.tsx#Logo"]={docgenInfo:Logo.__docgenInfo,name:"Logo",path:"../../packages/ui/src/index.tsx#Logo"})}catch(__react_docgen_typescript_loader_error){}try{cn.displayName="cn",cn.__docgenInfo={description:"",displayName:"cn",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../../packages/ui/src/index.tsx#cn"]={docgenInfo:cn.__docgenInfo,name:"cn",path:"../../packages/ui/src/index.tsx#cn"})}catch(__react_docgen_typescript_loader_error){}try{Button.displayName="Button",Button.__docgenInfo={description:"",displayName:"Button",props:{variant:{defaultValue:{value:"primary"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"primary"'},{value:'"secondary"'},{value:'"ghost"'},{value:'"danger"'}]}},size:{defaultValue:{value:"md"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"sm"'},{value:'"md"'},{value:'"lg"'}]}},loading:{defaultValue:{value:"false"},description:"",name:"loading",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ui/Button.tsx#Button"]={docgenInfo:Button.__docgenInfo,name:"Button",path:"src/components/ui/Button.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}},"./src/lib/semantic-merge-engine.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>SemanticMergeEngine});class SemanticMergeEngine{static analyzeSources(sources){const suggestions=[],columnsByCanonical=new Map;return sources.forEach(source=>{source.schema.forEach(column=>{const synonym=this.findSynonym(column.name);if(synonym){const key=synonym.canonicalName;columnsByCanonical.has(key)||columnsByCanonical.set(key,[]),columnsByCanonical.get(key).push({sourceId:source.id,sourceName:source.name,columnName:column.name,displayName:column.displayName,schema:column})}})}),columnsByCanonical.forEach((columns,canonicalName)=>{if(columns.length>1){const synonym=this.getSynonymByCanonical(canonicalName),confidence=this.calculateConfidence(columns);suggestions.push({confidence,canonicalName,displayName:synonym.displayName,columns:columns.map(col=>({sourceId:col.sourceId,sourceName:col.sourceName,columnName:col.columnName,displayName:col.displayName,sampleValues:col.schema.sampleValues})),suggestedAggregation:"metric"===synonym.classification?"sum":"first",reason:`Found ${columns.length} columns that represent "${synonym.displayName}" across different sources`})}}),suggestions.sort((a,b)=>b.confidence-a.confidence)}static createMergeRule(mergedName,displayName,sourceColumns,aggregationType){const rule={id:`merge_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,mergedName,displayName,sourceColumns,aggregationType,classification:"first"===aggregationType?"dimension":"metric",createdAt:(new Date).toISOString()};return this.mergeRules.push(rule),rule}static async executeQuery(query,sources){const startTime=Date.now(),sourcesUsed=sources.filter(s=>query.sources.includes(s.id)),mergeRulesApplied=[],sourceData=new Map;for(const source of sourcesUsed){let data=source.data;query.filters&&(data=data.filter(row=>query.filters.every(filter=>{const value=row[filter.column];switch(filter.operator){case"eq":return value===filter.value;case"ne":return value!==filter.value;case"gt":return Number(value)>Number(filter.value);case"lt":return Number(value)<Number(filter.value);case"contains":return String(value).toLowerCase().includes(String(filter.value).toLowerCase());case"in":return Array.isArray(filter.value)&&filter.value.includes(value);default:return!0}}))),query.dateRange&&(data=data.filter(row=>{const rowDate=row.date;return rowDate>=query.dateRange.start&&rowDate<=query.dateRange.end})),sourceData.set(source.id,data)}const columnsToMerge=new Map;[...query.dimensions,...query.metrics].forEach(columnName=>{const mergeRule=this.mergeRules.find(rule=>rule.mergedName===columnName);mergeRule&&(columnsToMerge.set(columnName,mergeRule),mergeRulesApplied.push(mergeRule.id))});const groupByColumns=query.groupBy||query.dimensions.filter(dim=>!columnsToMerge.has(dim)),mergedData=new Map;for(const[sourceId,data]of sourceData)for(const row of data){const groupKey=groupByColumns.map(col=>{const mergeRule=columnsToMerge.get(col);if(mergeRule){const sourceColumn=mergeRule.sourceColumns.find(sc=>sc.sourceId===sourceId);return sourceColumn?row[sourceColumn.columnName]:null}return row[col]}).join("|||");if(!mergedData.has(groupKey)){const mergedRow={};groupByColumns.forEach(col=>{const mergeRule=columnsToMerge.get(col);if(mergeRule){const sourceColumn=mergeRule.sourceColumns.find(sc=>sc.sourceId===sourceId);mergedRow[col]=sourceColumn?row[sourceColumn.columnName]:null}else mergedRow[col]=row[col]}),query.metrics.forEach(metric=>{columnsToMerge.get(metric)?(mergedRow[metric]=0,mergedRow[`${metric}_count`]=0):mergedRow[metric]=row[metric]||0}),mergedData.set(groupKey,mergedRow)}const existingRow=mergedData.get(groupKey);query.metrics.forEach(metric=>{const mergeRule=columnsToMerge.get(metric);if(mergeRule){const sourceColumn=mergeRule.sourceColumns.find(sc=>sc.sourceId===sourceId);if(sourceColumn){const value=row[sourceColumn.columnName]||0;switch(mergeRule.aggregationType){case"sum":existingRow[metric]+=Number(value);break;case"avg":existingRow[metric]+=Number(value),existingRow[`${metric}_count`]+=1;break;case"max":existingRow[metric]=Math.max(existingRow[metric],Number(value));break;case"min":existingRow[metric]=Math.min(existingRow[metric],Number(value));break;case"count":existingRow[metric]+=1;break;case"first":0===existingRow[metric]&&(existingRow[metric]=value)}}}else existingRow[metric]=(existingRow[metric]||0)+Number(row[metric]||0)})}const finalData=Array.from(mergedData.values()).map(row=>{const finalRow={...row};return query.metrics.forEach(metric=>{const mergeRule=columnsToMerge.get(metric);if(mergeRule&&"avg"===mergeRule.aggregationType){const count=finalRow[`${metric}_count`];count>0&&(finalRow[metric]=finalRow[metric]/count),delete finalRow[`${metric}_count`]}}),finalRow}),limitedData=query.limit?finalData.slice(0,query.limit):finalData,executionTime=Date.now()-startTime;return{data:limitedData,metadata:{totalRows:limitedData.length,sourcesUsed:sourcesUsed.map(s=>s.id),columnsReturned:[...query.dimensions,...query.metrics],mergeRulesApplied,queryExecutionTime:executionTime}}}static getMergeRules(){return[...this.mergeRules]}static deleteMergeRule(ruleId){const index=this.mergeRules.findIndex(rule=>rule.id===ruleId);return index>=0&&(this.mergeRules.splice(index,1),!0)}static findSynonym(columnName){return this.SYNONYM_LIBRARY.find(synonym=>synonym.synonyms.some(syn=>syn.toLowerCase()===columnName.toLowerCase()))}static getSynonymByCanonical(canonicalName){return this.SYNONYM_LIBRARY.find(synonym=>synonym.canonicalName===canonicalName)}static calculateConfidence(columns){let confidence=.7;1===new Set(columns.map(col=>col.schema.type)).size&&(confidence+=.2);return 1===new Set(columns.map(col=>col.schema.classification)).size&&(confidence+=.1),Math.min(confidence,1)}static getAllSynonyms(){return[...this.SYNONYM_LIBRARY]}}SemanticMergeEngine.SYNONYM_LIBRARY=[{id:"impressions",canonicalName:"impressions",displayName:"Impressions",synonyms:["impressions","imps","impression","views","ad_views"],dataType:"number",classification:"metric",description:"Number of times an ad was displayed",formatType:"number"},{id:"clicks",canonicalName:"clicks",displayName:"Clicks",synonyms:["clicks","link_clicks","ad_clicks","click","taps"],dataType:"number",classification:"metric",description:"Number of clicks on ads",formatType:"number"},{id:"cost",canonicalName:"cost",displayName:"Cost",synonyms:["cost","spend","total_spend","amount_spent","budget_used","cost_usd"],dataType:"number",classification:"metric",description:"Total amount spent on advertising",formatType:"currency",unit:"USD"},{id:"conversions",canonicalName:"conversions",displayName:"Conversions",synonyms:["conversions","conv","total_conversions","purchases","leads","signups"],dataType:"number",classification:"metric",description:"Number of conversion events",formatType:"number"},{id:"revenue",canonicalName:"revenue",displayName:"Revenue",synonyms:["revenue","sales","conversion_value","purchase_value","total_revenue"],dataType:"number",classification:"metric",description:"Revenue generated from conversions",formatType:"currency",unit:"USD"},{id:"ctr",canonicalName:"ctr",displayName:"CTR (%)",synonyms:["ctr","click_through_rate","link_ctr","clickthrough_rate"],dataType:"number",classification:"metric",description:"Click-through rate as a percentage",formatType:"percentage"},{id:"cpc",canonicalName:"cpc",displayName:"Cost Per Click",synonyms:["cpc","avg_cpc","cost_per_click","average_cpc"],dataType:"number",classification:"metric",description:"Average cost per click",formatType:"currency",unit:"USD"},{id:"date",canonicalName:"date",displayName:"Date",synonyms:["date","day","date_start","report_date","campaign_date"],dataType:"date",classification:"dimension",description:"Date of the data point",formatType:"date"},{id:"campaign",canonicalName:"campaign",displayName:"Campaign",synonyms:["campaign","campaign_name","campaign_title","ad_campaign"],dataType:"string",classification:"dimension",description:"Name of the advertising campaign"}],SemanticMergeEngine.mergeRules=[]},"./src/stores/data-source-store.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{O:()=>useDataSourceStore});var esm=__webpack_require__("../../node_modules/zustand/esm/index.mjs"),middleware=__webpack_require__("../../node_modules/zustand/esm/middleware.mjs");function generateDateRange(days){const dates=[],today=new Date;for(let i=days-1;i>=0;i--){const date=new Date(today);date.setDate(date.getDate()-i),dates.push(date.toISOString().split("T")[0])}return dates}const CAMPAIGN_NAMES=["Q4 Brand Awareness","Summer Sale Promo","Lead Generation Campaign","Product Launch 2024","Holiday Special Offer","Back to School Drive","Black Friday Deals","New Year Kickoff","Spring Collection Launch","Customer Retention Focus"],AUDIENCES=["Lookalike - High Value Customers","Retargeting - Website Visitors","Interest Targeting - Marketing Professionals","Custom Audience - Email List","Broad Targeting - Demographics","Behavioral - Online Shoppers","Geographic - Major Cities","Device - Mobile Users"];function generateGoogleAdsData(){const dates=generateDateRange(90),data=[];return dates.forEach((date,dayIndex)=>{const dailyEntries=2+Math.floor(3*Math.random());for(let i=0;i<dailyEntries;i++){const campaign=CAMPAIGN_NAMES[Math.floor(Math.random()*CAMPAIGN_NAMES.length)],adGroup=AUDIENCES[Math.floor(Math.random()*AUDIENCES.length)],impressions=Math.round(5e3+15e3*Math.random()),ctr=(2.5+2*Math.random())/100,clicks=Math.round(impressions*ctr),cpc=1.5+3*Math.random(),cost=Math.round(clicks*cpc*100)/100,conversionRate=(2+4*Math.random())/100,conversions=Math.round(clicks*conversionRate),costPerConversion=conversions>0?Math.round(cost/conversions*100)/100:0,revenue=Math.round(conversions*(60+140*Math.random())*100)/100;data.push({date,campaign_name:campaign,ad_group:adGroup,impressions,clicks,cost,conversions,revenue,ctr:Math.round(1e4*ctr)/100,cpc:Math.round(100*cpc)/100,cost_per_conversion:costPerConversion,roas:cost>0?Math.round(revenue/cost*100)/100:0})}}),{id:"google_ads_demo",name:"Google Ads Campaign Data",type:"google_ads",description:"Search and display campaign performance from Google Ads",schema:[{name:"date",displayName:"Date",type:"date",classification:"dimension",description:"Campaign date",isNullable:!1,sampleValues:["2024-01-01","2024-01-02"]},{name:"campaign_name",displayName:"Campaign Name",type:"string",classification:"dimension",description:"Name of the advertising campaign",isNullable:!1,sampleValues:["Q4 Brand Awareness","Summer Sale Promo"]},{name:"ad_group",displayName:"Ad Group",type:"string",classification:"dimension",description:"Ad group within campaign",isNullable:!1,sampleValues:["Lookalike - High Value","Retargeting - Website"]},{name:"impressions",displayName:"Impressions",type:"number",classification:"metric",description:"Number of times ads were shown",isNullable:!1,sampleValues:[12543,8921]},{name:"clicks",displayName:"Clicks",type:"number",classification:"metric",description:"Number of clicks on ads",isNullable:!1,sampleValues:[456,234]},{name:"cost",displayName:"Cost",type:"number",classification:"metric",description:"Total cost spent on ads",isNullable:!1,sampleValues:[1234.56,789.01]},{name:"conversions",displayName:"Conversions",type:"number",classification:"metric",description:"Number of conversion events",isNullable:!1,sampleValues:[23,15]},{name:"revenue",displayName:"Revenue",type:"number",classification:"metric",description:"Revenue generated from conversions",isNullable:!1,sampleValues:[2890.45,1567.89]},{name:"ctr",displayName:"CTR (%)",type:"number",classification:"metric",description:"Click-through rate percentage",isNullable:!1,sampleValues:[3.64,2.62]},{name:"cpc",displayName:"CPC",type:"number",classification:"metric",description:"Cost per click",isNullable:!1,sampleValues:[2.71,3.37]},{name:"cost_per_conversion",displayName:"Cost per Conversion",type:"number",classification:"metric",description:"Average cost per conversion",isNullable:!1,sampleValues:[53.68,52.6]},{name:"roas",displayName:"ROAS",type:"number",classification:"metric",description:"Return on ad spend",isNullable:!1,sampleValues:[2.34,1.99]}],data,lastSynced:(new Date).toISOString(),status:"active"}}function generateFacebookAdsData(){const dates=generateDateRange(90),data=[];return dates.forEach((date,dayIndex)=>{const dailyEntries=2+Math.floor(3*Math.random());for(let i=0;i<dailyEntries;i++){const campaign=CAMPAIGN_NAMES[Math.floor(Math.random()*CAMPAIGN_NAMES.length)],adSet=AUDIENCES[Math.floor(Math.random()*AUDIENCES.length)],imps=Math.round(8e3+2e4*Math.random()),linkCtr=(1.2+1.8*Math.random())/100,linkClicks=Math.round(imps*linkCtr),spend=Math.round(linkClicks*(.8+2.2*Math.random())*100)/100,conversionRate=(1.5+3.5*Math.random())/100,conv=Math.round(linkClicks*conversionRate),revenue=Math.round(conv*(50+150*Math.random())*100)/100;data.push({date,campaign_name:campaign,ad_set_name:adSet,imps,link_clicks:linkClicks,spend,conv,revenue,link_ctr:Math.round(1e4*linkCtr)/100,cpc:linkClicks>0?Math.round(spend/linkClicks*100)/100:0,cpa:conv>0?Math.round(spend/conv*100)/100:0,roas:spend>0?Math.round(revenue/spend*100)/100:0,frequency:1.1+2*Math.random(),reach:Math.round(imps/(1.1+2*Math.random()))})}}),{id:"facebook_ads_demo",name:"Facebook Ads Campaign Data",type:"facebook_ads",description:"Social media campaign performance from Facebook Ads Manager",schema:[{name:"date",displayName:"Date",type:"date",classification:"dimension",description:"Campaign date",isNullable:!1,sampleValues:["2024-01-01","2024-01-02"]},{name:"campaign_name",displayName:"Campaign Name",type:"string",classification:"dimension",description:"Name of the Facebook campaign",isNullable:!1,sampleValues:["Q4 Brand Awareness","Summer Sale Promo"]},{name:"ad_set_name",displayName:"Ad Set Name",type:"string",classification:"dimension",description:"Ad set within campaign",isNullable:!1,sampleValues:["Lookalike - High Value","Interest - Marketing"]},{name:"imps",displayName:"Impressions",type:"number",classification:"metric",description:"Number of times ads were shown",isNullable:!1,sampleValues:[15432,12987]},{name:"link_clicks",displayName:"Link Clicks",type:"number",classification:"metric",description:"Number of clicks on ad links",isNullable:!1,sampleValues:[234,187]},{name:"spend",displayName:"Amount Spent",type:"number",classification:"metric",description:"Total amount spent on ads",isNullable:!1,sampleValues:[567.89,423.56]},{name:"conv",displayName:"Conversions",type:"number",classification:"metric",description:"Number of conversion events",isNullable:!1,sampleValues:[12,8]},{name:"revenue",displayName:"Revenue",type:"number",classification:"metric",description:"Revenue generated from conversions",isNullable:!1,sampleValues:[1234.56,890.12]},{name:"link_ctr",displayName:"Link CTR (%)",type:"number",classification:"metric",description:"Link click-through rate",isNullable:!1,sampleValues:[1.52,1.44]},{name:"cpc",displayName:"CPC",type:"number",classification:"metric",description:"Cost per link click",isNullable:!1,sampleValues:[2.43,2.26]},{name:"cpa",displayName:"CPA",type:"number",classification:"metric",description:"Cost per conversion",isNullable:!1,sampleValues:[47.32,52.95]},{name:"roas",displayName:"ROAS",type:"number",classification:"metric",description:"Return on ad spend",isNullable:!1,sampleValues:[2.18,2.1]},{name:"frequency",displayName:"Frequency",type:"number",classification:"metric",description:"Average times each person saw the ad",isNullable:!1,sampleValues:[1.8,2.1]},{name:"reach",displayName:"Reach",type:"number",classification:"metric",description:"Number of unique people reached",isNullable:!1,sampleValues:[8567,6234]}],data,lastSynced:(new Date).toISOString(),status:"active"}}function generateLinkedInAdsData(){const dates=generateDateRange(90),data=[];return dates.forEach((date,dayIndex)=>{const dailyEntries=1+Math.floor(3*Math.random());for(let i=0;i<dailyEntries;i++){const campaign=CAMPAIGN_NAMES[Math.floor(Math.random()*CAMPAIGN_NAMES.length)],impressions=Math.round(2e3+8e3*Math.random()),ctr=(.8+1.2*Math.random())/100,clicks=Math.round(impressions*ctr),totalSpend=Math.round(clicks*(3+6*Math.random())*100)/100,conversionRate=(3+5*Math.random())/100,totalConversions=Math.round(clicks*conversionRate),revenue=Math.round(totalConversions*(150+350*Math.random())*100)/100;data.push({date,campaign_name:campaign,impressions,clicks,total_spend:totalSpend,total_conversions:totalConversions,revenue,ctr:Math.round(1e4*ctr)/100,avg_cpc:clicks>0?Math.round(totalSpend/clicks*100)/100:0,conversion_rate:Math.round(1e4*conversionRate)/100,cost_per_conversion:totalConversions>0?Math.round(totalSpend/totalConversions*100)/100:0,roas:totalSpend>0?Math.round(revenue/totalSpend*100)/100:0,video_views:Math.round(impressions*(.05+.15*Math.random())),engagement_rate:.5+2*Math.random()})}}),{id:"linkedin_ads_demo",name:"LinkedIn Ads Campaign Data",type:"linkedin_ads",description:"B2B campaign performance from LinkedIn Campaign Manager",schema:[{name:"date",displayName:"Date",type:"date",classification:"dimension",description:"Campaign date",isNullable:!1,sampleValues:["2024-01-01","2024-01-02"]},{name:"campaign_name",displayName:"Campaign Name",type:"string",classification:"dimension",description:"Name of the LinkedIn campaign",isNullable:!1,sampleValues:["Q4 Brand Awareness","Lead Generation"]},{name:"impressions",displayName:"Impressions",type:"number",classification:"metric",description:"Number of times ads were served",isNullable:!1,sampleValues:[5432,4123]},{name:"clicks",displayName:"Clicks",type:"number",classification:"metric",description:"Number of clicks on ads",isNullable:!1,sampleValues:[87,65]},{name:"total_spend",displayName:"Total Spend",type:"number",classification:"metric",description:"Total amount spent on advertising",isNullable:!1,sampleValues:[456.78,334.12]},{name:"total_conversions",displayName:"Total Conversions",type:"number",classification:"metric",description:"Total number of conversions",isNullable:!1,sampleValues:[7,5]},{name:"revenue",displayName:"Revenue",type:"number",classification:"metric",description:"Revenue generated from conversions",isNullable:!1,sampleValues:[2100,1750]},{name:"ctr",displayName:"CTR (%)",type:"number",classification:"metric",description:"Click-through rate percentage",isNullable:!1,sampleValues:[1.6,1.58]},{name:"avg_cpc",displayName:"Avg CPC",type:"number",classification:"metric",description:"Average cost per click",isNullable:!1,sampleValues:[5.25,5.14]},{name:"conversion_rate",displayName:"Conversion Rate (%)",type:"number",classification:"metric",description:"Percentage of clicks that converted",isNullable:!1,sampleValues:[8.05,7.69]},{name:"cost_per_conversion",displayName:"Cost per Conversion",type:"number",classification:"metric",description:"Average cost per conversion",isNullable:!1,sampleValues:[65.25,66.82]},{name:"roas",displayName:"ROAS",type:"number",classification:"metric",description:"Return on ad spend",isNullable:!1,sampleValues:[4.6,5.24]},{name:"video_views",displayName:"Video Views",type:"number",classification:"metric",description:"Number of video ad views",isNullable:!1,sampleValues:[234,189]},{name:"engagement_rate",displayName:"Engagement Rate (%)",type:"number",classification:"metric",description:"Rate of engagement with ads",isNullable:!1,sampleValues:[1.2,1.8]}],data,lastSynced:(new Date).toISOString(),status:"active"}}const MULTI_SOURCE_DEMO_DATA=[generateGoogleAdsData(),generateFacebookAdsData(),generateLinkedInAdsData()];generateGoogleAdsData(),generateFacebookAdsData(),generateLinkedInAdsData();var semantic_merge_engine=__webpack_require__("./src/lib/semantic-merge-engine.ts");const useDataSourceStore=(0,esm.vt)()((0,middleware.lt)((set,get)=>({dataSources:[],currentDataSource:null,demoSources:[],isDemoMode:!0,snapshots:{},mergeRules:[],mergeSuggestions:[],isAnalyzing:!1,isLoading:!1,isSyncing:{},setDataSources:dataSources=>set({dataSources},!1,"setDataSources"),setCurrentDataSource:dataSource=>set({currentDataSource:dataSource},!1,"setCurrentDataSource"),addDataSource:dataSource=>set(state=>({dataSources:[...state.dataSources,dataSource]}),!1,"addDataSource"),updateDataSource:dataSource=>set(state=>{var _state_currentDataSource;return{dataSources:state.dataSources.map(ds=>ds.id===dataSource.id?dataSource:ds),currentDataSource:(null===(_state_currentDataSource=state.currentDataSource)||void 0===_state_currentDataSource?void 0:_state_currentDataSource.id)===dataSource.id?dataSource:state.currentDataSource}},!1,"updateDataSource"),deleteDataSource:id=>set(state=>{var _state_currentDataSource;return{dataSources:state.dataSources.filter(ds=>ds.id!==id),currentDataSource:(null===(_state_currentDataSource=state.currentDataSource)||void 0===_state_currentDataSource?void 0:_state_currentDataSource.id)===id?null:state.currentDataSource,snapshots:Object.fromEntries(Object.entries(state.snapshots).filter(([key])=>key!==id)),isSyncing:Object.fromEntries(Object.entries(state.isSyncing).filter(([key])=>key!==id))}},!1,"deleteDataSource"),setSyncStatus:(id,status)=>set(state=>{var _state_currentDataSource;return{dataSources:state.dataSources.map(ds=>ds.id===id?{...ds,sync_status:status}:ds),currentDataSource:(null===(_state_currentDataSource=state.currentDataSource)||void 0===_state_currentDataSource?void 0:_state_currentDataSource.id)===id?{...state.currentDataSource,sync_status:status}:state.currentDataSource}},!1,"setSyncStatus"),setSyncing:(id,syncing)=>set(state=>({isSyncing:{...state.isSyncing,[id]:syncing}}),!1,"setSyncing"),setLastSynced:(id,timestamp)=>set(state=>{var _state_currentDataSource;return{dataSources:state.dataSources.map(ds=>ds.id===id?{...ds,last_synced_at:timestamp}:ds),currentDataSource:(null===(_state_currentDataSource=state.currentDataSource)||void 0===_state_currentDataSource?void 0:_state_currentDataSource.id)===id?{...state.currentDataSource,last_synced_at:timestamp}:state.currentDataSource}},!1,"setLastSynced"),setSnapshots:(dataSourceId,snapshots)=>set(state=>({snapshots:{...state.snapshots,[dataSourceId]:snapshots}}),!1,"setSnapshots"),addSnapshot:snapshot=>set(state=>({snapshots:{...state.snapshots,[snapshot.data_source_id]:[...state.snapshots[snapshot.data_source_id]||[],snapshot].sort((a,b)=>new Date(b.snapshot_date).getTime()-new Date(a.snapshot_date).getTime())}}),!1,"addSnapshot"),setDemoMode:enabled=>{set({isDemoMode:enabled},!1,"setDemoMode"),enabled&&get().loadDemoSources()},loadDemoSources:()=>{set({isLoading:!0},!1,"loadDemoSources start");try{const demoSources=function getAllDemoSources(){return MULTI_SOURCE_DEMO_DATA}();set({demoSources,isLoading:!1},!1,"loadDemoSources success"),setTimeout(()=>get().refreshMergeSuggestions(),100)}catch(error){set({isLoading:!1},!1,"loadDemoSources error")}},getDemoSourceById:id=>get().demoSources.find(ds=>ds.id===id),refreshMergeSuggestions:()=>{const{demoSources,isAnalyzing}=get();if(!isAnalyzing&&0!==demoSources.length){set({isAnalyzing:!0},!1,"refreshMergeSuggestions start");try{const suggestions=semantic_merge_engine.Z.analyzeSources(demoSources);set({mergeSuggestions:suggestions,isAnalyzing:!1},!1,"refreshMergeSuggestions success")}catch(error){set({isAnalyzing:!1},!1,"refreshMergeSuggestions error")}}},addMergeRule:rule=>{set(state=>({mergeRules:[...state.mergeRules,rule]}),!1,"addMergeRule"),get().refreshMergeSuggestions()},removeMergeRule:ruleId=>{semantic_merge_engine.Z.deleteMergeRule(ruleId),set(state=>({mergeRules:state.mergeRules.filter(rule=>rule.id!==ruleId)}),!1,"removeMergeRule"),get().refreshMergeSuggestions()},getMergeRuleByName:name=>get().mergeRules.find(rule=>rule.mergedName===name),setLoading:loading=>set({isLoading:loading},!1,"setLoading"),setAnalyzing:analyzing=>set({isAnalyzing:analyzing},!1,"setAnalyzing"),getDataSourceById:id=>get().dataSources.find(ds=>ds.id===id),getSnapshotsByDataSourceId:id=>get().snapshots[id]||[],getLatestSnapshot:dataSourceId=>(get().snapshots[dataSourceId]||[])[0],getAllAvailableSources:()=>{const{dataSources,demoSources,isDemoMode}=get();return isDemoMode?demoSources:dataSources}}),{name:"data-source-store"}));useDataSourceStore.getState().loadDemoSources()}}]);