"use client"

import { useState } from 'react'
import { useDashboardStore, useUIStore } from '@/stores'
import { Button } from '@/components/ui/Button'

export function DashboardTabs() {
  const { currentDashboard, currentTabId, setCurrentTab, addTab, deleteTab } = useDashboardStore()
  const { openModal } = useUIStore()
  const [isAddingTab, setIsAddingTab] = useState(false)
  const [newTabName, setNewTabName] = useState('')

  const tabs = currentDashboard?.tabs || []

  const handleTabClick = (tabId: string) => {
    setCurrentTab(tabId)
  }

  const handleAddTab = () => {
    setIsAddingTab(true)
    setNewTabName('')
  }

  const handleCreateTab = () => {
    if (newTabName.trim() && currentDashboard) {
      const newTab = {
        id: `tab-${Date.now()}`, // In real app, this would be generated by the API
        dashboard_id: currentDashboard.id,
        name: newTabName.trim(),
        position: tabs.length,
        widgets: []
      }
      
      addTab(newTab)
      setCurrentTab(newTab.id)
      setIsAddingTab(false)
      setNewTabName('')
    }
  }

  const handleCancelAdd = () => {
    setIsAddingTab(false)
    setNewTabName('')
  }

  const handleDeleteTab = (tabId: string, e: React.MouseEvent) => {
    e.stopPropagation()
    
    if (tabs.length <= 1) {
      // Don't allow deleting the last tab
      return
    }

    // If deleting current tab, switch to another tab first
    if (tabId === currentTabId) {
      const remainingTabs = tabs.filter(t => t.id !== tabId)
      if (remainingTabs.length > 0) {
        setCurrentTab(remainingTabs[0].id)
      }
    }

    deleteTab(tabId)
  }

  return (
    <div className="bg-white border-b border-gray-200">
      <div className="flex items-center px-6">
        <div className="flex items-center space-x-1 overflow-x-auto">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => handleTabClick(tab.id)}
              className={`
                flex items-center space-x-2 px-4 py-3 text-sm font-medium border-b-2 whitespace-nowrap
                ${tab.id === currentTabId
                  ? 'border-primary-600 text-primary-600 bg-primary-50'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }
              `}
            >
              <span>{tab.name}</span>
              
              {tabs.length > 1 && (
                <button
                  onClick={(e) => handleDeleteTab(tab.id, e)}
                  className="ml-2 text-gray-400 hover:text-red-500"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              )}
            </button>
          ))}

          {/* Add Tab Button */}
          {isAddingTab ? (
            <div className="flex items-center space-x-2 px-4 py-3">
              <input
                type="text"
                value={newTabName}
                onChange={(e) => setNewTabName(e.target.value)}
                placeholder="Tab name"
                className="text-sm border border-gray-300 rounded px-2 py-1 w-24 focus:outline-none focus:ring-1 focus:ring-primary-500"
                onKeyDown={(e) => {
                  if (e.key === 'Enter') handleCreateTab()
                  if (e.key === 'Escape') handleCancelAdd()
                }}
                autoFocus
              />
              <button
                onClick={handleCreateTab}
                className="text-green-600 hover:text-green-700"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </button>
              <button
                onClick={handleCancelAdd}
                className="text-red-600 hover:text-red-700"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          ) : (
            <button
              onClick={handleAddTab}
              className="flex items-center space-x-2 px-4 py-3 text-sm text-gray-500 hover:text-gray-700"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              <span>Add Tab</span>
            </button>
          )}
        </div>

        <div className="ml-auto flex items-center space-x-2">
          <span className="text-xs text-gray-500">
            {tabs.find(t => t.id === currentTabId)?.widgets.length || 0} widgets
          </span>
        </div>
      </div>
    </div>
  )
}